spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
    hikari:
      connection-test-query: SELECT 1
  h2:
    console:
      enabled: true
      path: /h2-console





import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.env.Environment;

import java.util.Arrays;

@SpringBootApplication
public class PropertyLogApplication implements CommandLineRunner {

    @Autowired
    private Environment environment;

    public static void main(String[] args) {
        SpringApplication.run(PropertyLogApplication.class, args);
    }

    @Override
    public void run(String... args) {
        // Log all properties in the environment
        Arrays.stream(environment.getPropertySources().iterator())
                .filter(propertySource -> propertySource.containsProperty("spring"))
                .forEach(propertySource -> {
                    System.out.println("Properties from: " + propertySource.getName());
                    Arrays.stream(environment.getPropertyNames())
                            .filter(propertyName -> propertyName.startsWith("spring"))
                            .forEach(propertyName -> {
                                System.out.println(propertyName + ": " + environment.getProperty(propertyName));
                            });
                });
    }
}





import javax.sql.DataSource;

import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Autowired
    private DataSource dataSource;

    // Your job and step configurations go here

@Bean
    public PlatformTransactionManager transactionManager(DataSource dataSource) {
        return new org.springframework.jdbc.datasource.DataSourceTransactionManager(dataSource);
    }

    @Bean
    public JobRepository jobRepository() throws Exception {
        JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean();
        factory.setDataSource(dataSource);
        factory.setTransactionManager(transactionManager());
        factory.afterPropertiesSet();
        return factory.getObject();
    }

    // Other configurations (Job, Step, ItemReader, ItemProcessor, ItemWriter) go here

    // For illustrative purposes, you can define a simple job here
}

